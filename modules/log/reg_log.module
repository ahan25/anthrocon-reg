<?php
/**
* Our registration logging module.
*
* @author Douglas Muth <http://www.dmuth.org/>
*
*/


require_once("devel.inc.php");


/**
* Our init hook.
*/
function reg_log_init() {
	reg_log_devel();
} // End of reg_log_init()


/**
* This is our registration log function.  It contains a wrapper for
* the Drupal watchdog() facility, but also logs entries via our own logging
* table.  This way, we can keep track of log entries in the registration 
* system for months, or even years if necessary.
*
* @param string $message The log message
*
* @param integer $reg_id An optional value for the registered user's ID.
*
* @param string $severity The severity of the message.  Can be "notice",
*	"warning", or "error".
*
* @param boolean $backtrace If set to true, we'll include a 
*	backtrace in the watchdog log entry.
*
* @return integer The ID of the row that was inserted into reg_log.
*
*/
function reg_log($message, $reg_id, $severity = "notice", $backtrace = false) {

	global $user, $base_root;

	//
	// Convert our severity into Drupal constants.
	//
	if ($severity == "notice") {
		$severity = WATCHDOG_NOTICE;

	} else if ($severity == "warning") {
		$severity = WATCHDOG_WARNING;

	} else if ($severity == "error") {
		$severity = WATCHDOG_ERROR;

	} else {
		$severity = WATHDOG_NOTICE;

	}

	$watchdog_message = $message;
	if ($backtrace) {
		$trace = reg_log_get_backtrace();
		//reg_debug($trace); // Debugging
		$watchdog_message .= "<br/><br/>Traceback:<br/>${trace}";
	}

	watchdog("reg", $watchdog_message, null, $severity);

	//
	// Non-apache setups (nginx, SSL accelerators, etc.) cause $base_root
	// to not include SSL.  So we're going to do an additional check
	// and fix there here.
	//
	if (reg_is_ssl()) {
		$base_root = eregi_replace("^http://", "https://", $base_root);
	}

	$url = $base_root . request_uri();
	$query = "INSERT INTO {reg_log} "
		. "(reg_id, uid, date, url, "
		. "referrer, remote_addr, message, "
			. "severity) "
		. "VALUES "
		. "('%s', '%s', '%s', '%s', '%s', '%s', '%s', "
			. "'%s') "
		;
	$query_args = array($reg_id, $user->uid, time(), $url, 
		referer_uri(), $_SERVER["REMOTE_ADDR"], $message,
		$severity,
		);
	db_query($query, $query_args);

	$id = reg_get_insert_id();

	return($id);

} // End of reg_log()


/**
* This function logs a successful transaction.
*
* @TODO Support for different transaction types?
*
* @return integer the ID of the row that was inserted into the database.
*/
function reg_log_trans(&$data) {

	global $user;

	$exp = $data["cc_exp"];

	//
	// Turn the expiration date into a time_t, and then add one day.
	// The reason for this is because we had some GMT offset issues where
	// folks would be unable to view their registrations, because somewhere
	// the expiration date's time_t would be "adjusted" into the prior
	// month.  This will prevent that from happening.
	//
	$exp_string = 0;
	if (!empty($exp)) {
		$exp_string = reg_get_time_t($exp["year"], $exp["month"], 1);
		$exp_string += 86400;
	}

	//
	// Make sure we have actual numbers here, just in case.
	//
	if (empty($data["badge_cost"])) {
		$data["badge_cost"] = 0;
	}

	if (empty($data["donation"])) {
		$data["donation"] = 0;
	}

	//
	// We NEVER want to log the full credit card number.  That creates a
	// bunch of security concerns.
	//
	if (!empty($data["cc_num"])) {
		$data["cc_num"] = reg_get_cc_last_4($data["cc_num"]);
	}

	$data["total_cost"] = $data["badge_cost"] + $data["donation"];
	//
	// Save the successful charge in reg_trans.
	//
	$query = "INSERT INTO {reg_trans} ("
		. "uid, reg_id, "
		. "date, reg_trans_type_id, reg_payment_type_id, "
		. "reg_trans_gateway_id, "
		. "first, middle, last, address1, address2, "
		. "city, state, zip, country, "
		. "shipping_name, shipping_address1, shipping_address2, "
		. "shipping_city, shipping_state, shipping_zip, "
		. "shipping_country, "
		. "reg_cc_type_id, cc_num, card_expire, "
		. "badge_cost, donation, total_cost, "
		. "reg_log_id, gateway_auth_code, gateway_avs, gateway_cvv, "
		. "gateway_transaction_id, invoice_number "
		. ") VALUES ("
		. "'%s', '%s', "
		. "'%s', '%s', '%s', "
		. "'%s', "
		. "'%s', '%s', '%s', '%s', '%s', "
		. "'%s', '%s', '%s', '%s', "
		. "'%s', '%s', '%s', "
		. "'%s', '%s', '%s', "
		. "'%s', "
		. "'%s', '%s', '%s', "
		. "'%s', '%s', '%s', "
		. "'%s', '%s', '%s', '%s', "
		. "'%s', '%s' "
		. ")"
		;

	$query_args = array(
		$user->uid, $data["reg_id"], 
		time(), $data["reg_trans_type_id"], $data["reg_payment_type_id"],
		$data["reg_trans_gateway_id"],
		$data["first"], $data["middle"], $data["last"], 
			$data["address1"], $data["address2"],
		$data["city"], $data["state"], $data["zip"], $data["country"],
		$data["shipping_name"], $data["shipping_address1"], 
		$data["shipping_address2"], $data["shipping_city"], 
		$data["shipping_state"], $data["shipping_zip"], 
		$data["shipping_country"],
		$data["cc_type_id"], $data["cc_num"], $exp_string,
		$data["badge_cost"], $data["donation"], $data["total_cost"],
		$data["reg_log_id"], $data["gateway_auth_code"], 
			$data["gateway_avs"], $data["gateway_cvv"],
		$data["gateway_transaction_id"], $data["invoice_number"],
		);

	db_query($query, $query_args);

	//
	// Update our main registration record, if one is present.
	//
	if (!empty($data["reg_id"])) {
		$query = "UPDATE {reg} "
			. "SET "
			. "badge_cost = badge_cost + '%s', "
			. "donation = donation + '%s', "
			. "total_cost = total_cost + '%s' "
			. "WHERE "
			. "id='%s' ";
		$query_args = array($data["badge_cost"], $data["donation"],
			$data["total_cost"], $data["reg_id"]);
		db_query($query, $query_args);

	}

	$id = reg_get_insert_id();

	return($id);

} // End of log_trans()


/**
* Get our backtrace, and return a string of the contents.
*/
function reg_log_get_backtrace() {

	$retval = "";

	$trace = debug_backtrace();

	//
	// Remove the last two calls to here
	//
	array_shift($trace);
	array_shift($trace);

	//
	// Now reverse the array, then loop through it and create our string.
	//
	$trace = array_reverse($trace);
	foreach ($trace as $key => $value) {
		$func = $value["function"];
		//$line = $value["line"];
		$args = $value["args"];

		//
		// Convert any non-strings and non-numbers into a string for 
		// debugging purposes.
		//
		$args2 = array();
		foreach ($args as $key2 => $value2) {
			if (!is_int($value2) && !is_string($value2)) {
				$args2[$key2] = gettype($value2);
			}
		}
		$args2 = join(", ", $args2);

		if ($retval) {
			$retval .= "<br/>-> ";
		}

		$retval .= "${func}(${args2})";

	}

	//reg_debug($retval); // Debugging

	return($retval);

} // End of reg_log_get_backtrace()



