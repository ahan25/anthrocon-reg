<?php
/**
* Anthrocon's authorize.net integration module.
*
* This code is copyright 2008 by Douglas Muth.  Permission is granted
*	to redistribute under the Gnu Public License.
*
*/

/**
* Define our autoloader, and register it.
*/
function reg_authorize_net_autoload($class) {

	//
	// Only load classes we're responsible for.
	//
	if (!preg_match("/^reg_authorize_net/", $class)) {
		//print "(authorize_net) NO MATCH ON CLASS: $class<br/>\n"; // Debugging
		return(null);
	}

	//print "Class (authorize_net): $class<br>\n"; // Debugging

	$dir = drupal_get_path("module", "reg_authorize_net");
	//print "DIR: $dir<br/>\n"; // Debugging

	//
	// It seems a bit silly that I'm not using a generic system, but 
	// we're only dealing with these 4 classes, and I'm going to phase 
	// them back into functions at some point anyway for my general sanity.
	//
	if ($class == "reg_authorize_net") {
		$file = $dir . "/" . "authorize_net.class.php";

	} else if ($class == "reg_authorize_net_factory") {
		$file = $dir . "/" . "factory.class.php";

	} else if ($class == "reg_authorize_net_menu") {
		$file = $dir . "/" . "menu.class.php";

	} else if ($class == "reg_authorize_net_settings") {
		$file = $dir . "/" . "settings.class.php";

	}

	//print "FILE (authorize_net): $file<br/>\n"; // Debugging
	//drupal_set_message("FILE (authorize_net): $file"); // Debugging

	include_once($file);

} // End of reg_authorize_net_autoload()


//
// Register our autoloader.
//
spl_autoload_register("reg_authorize_net_autoload");


function reg_authorize_net_init() {

	//
	// Load our Javascript
	//
	$path = drupal_get_path("module", "reg_authorize_net");
	drupal_add_js($path . "/reg_authorize_net.js", "module");

} // End of reg_authorize_net_init()


/**
* Create our menu items.
*/
function reg_authorize_net_menu() {

	$factory = new reg_authorize_net_factory();
	$menu = $factory->get_object("menu");

	$items = $menu->get_menu();

	return($items);

} // End of reg_authorize_net_menu()


/**
* Our settings page.
* 
* DO NOT name this authorize_net_settings.  If this function is named
* the same as a the class, it completely breaks under PHP 5.2.4.  I learned 
*	this the hard way.
*/
function reg_authorize_net_settings_page() {

	//
	// If the reg module wasn't loaded, then the factory doesn't exist, 
	// and we should stop here.
	//
	if (!class_exists("reg_factory", false)) {
		$message = t("Sorry, but the reg module needs to be enabled.");
		form_set_error("", $message);
		return("");
	}

	$reg_factory = new reg_factory();
	$reg = $reg_factory->get_object("reg");
	$reg->force_ssl();

	$factory = new reg_authorize_net_factory();
	$settings = $factory->get_object("settings");

	return($settings->settings());

} // End of reg_authorize_net_settings()


function reg_authorize_net_settings_form() {

	$factory = new reg_authorize_net_factory();
	$settings = $factory->get_object("settings");

	return($settings->form());
}

function reg_authorize_net_settings_form_validate($form, &$form_state) {

	$factory = new reg_authorize_net_factory();
	$settings = $factory->get_object("settings");

	$settings->validate($form_state["values"]);
}

function reg_authorize_net_settings_form_submit($form, &$form_state) {

	$factory = new reg_authorize_net_factory();
	$settings = $factory->get_object("settings");

	$settings->submit($form_state["values"]);
}

function reg_authorize_net_settings_form_submit_test_gateway($form, &$form_state) {

	$factory = new reg_authorize_net_factory();
	$settings = $factory->get_object("settings");

	$settings->submit($form_state["values"], true);

}



