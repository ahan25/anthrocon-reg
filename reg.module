<?php
/**
* Anthrocon's registration module.
*
* This code is copyright 2008 by Douglas Muth.  Permission is granted
*	to redistribute under the Gnu Public License.
*
*/


/**
* Define our autoloader, and register it.
*/
function reg_autoload($class) {
	//print "$class<br>\n"; // Debugging
	$class = str_replace("_", "/", $class);
	//print "$class<br>\n"; // Debugging
	$file = $class . ".class.php";
	//print "$file<br>\n"; // Debugging
	include_once($file);
}

spl_autoload_register("reg_autoload");


/**
* Our list of permissions
*/
function reg_perm() {
	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	return($reg->perm());
}


function reg_init() {
}


function reg_exit() {
	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->hook_exit();
}



/**
* Create our menu items.
*
* Do NOT name the underlying class reg_menu!  If a function and class
*	share identical names in PHP 5.2.4, all sorts of bad things happen!
*	I learned this the hard way. :-(
*
* Though on second thought, I've since considered that maybe my PHP 
*	cache (APC) was caching non-existant files when I moved the one
*	reg/ directory out of the way to make way for a new installation,
*	AND restarting the php-cgi process seemed to fix the problem.  This
*	will require more investigation in the future.
*/
function reg_menu($may_cache) {

	$factory = new reg_factory();
	$menu = $factory->get_object("menu");
	$items = $menu->menu($may_cache);
	return($items);

} // End of reg_menu()


/**
* Our public verification page.
*/
function reg_verify($id_email = "") {

	$factory = new reg_factory();

	$reg = $factory->get_object("reg");
	$reg->force_ssl();

	$verify = $factory->get_object("verify");
	$retval = $verify->verify($id_email);

	return($retval);
} 

function reg_verify_form() {
	$factory = new reg_factory();
	$verify = $factory->get_object("verify");
	$retval = $verify->verify_form();
	return($retval);
}

function reg_verify_form_validate($form_id, &$data) {
	$factory = new reg_factory();
	$verify = $factory->get_object("verify");
	$verify->verify_validate($form_id, $data);
}

function reg_verify_form_submit($form_id, &$data) {
	$factory = new reg_factory();
	$verify = $factory->get_object("verify");
	$retval = $verify->verify_submit($form_id, $data);
	return($retval);
}


/**
* Our "success" page.
*/
function reg_success() {
	$factory = new reg_factory();
	$success = $factory->get_object("success");
	$retval = $success->success();
	return($retval);
}


/**
* Our public registration page.
*/
function reg_registration() {

	$factory = new reg_factory();
	$reg = $factory->get_object("reg");

	$reg->force_ssl();
	return($reg->registration());
}

function reg_registration_form($id = "") {

	$reg = new reg();
	$log = new reg_log();
	$cc_gateway = new authorize_net($reg, $log);

	$factory = new reg_factory();
	$form = $factory->get_object("form");

	return($form->reg($id, $cc_gateway));

}

function reg_registration_form_validate($form_id, &$data) {

	$reg = new reg();
	$log = new reg_log();
	$cc_gateway = new authorize_net($reg, $log);

	$factory = new reg_factory();
	$form = $factory->get_object("form");

	$form->reg_validate($form_id, $data, $cc_gateway);

}

function reg_registration_form_submit($form_id, &$data) {

	$factory = new reg_factory();
	$form = $factory->get_object("form");

	return($form->reg_submit($form_id, $data));

}


/**
* Our settings form.
*/
function reg_admin_settings() {
	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();
	$settings = $factory->get_object("admin_settings");
	$retval = $settings->settings();
	return($retval);
}

function reg_admin_settings_form() {
	$factory = new reg_factory();
	$settings = $factory->get_object("admin_settings");
	$retval = $settings->settings_form();
	return($retval);
}

function reg_admin_settings_form_validate($form_id, $data) {
	$factory = new reg_factory();
	$settings = $factory->get_object("admin_settings");
	$settings->settings_form_validate($form_id, $data);
}

function reg_admin_settings_form_submit($form_id, $data) {
	$factory = new reg_factory();
	$settings = $factory->get_object("admin_settings");
	$settings->settings_form_submit($form_id, $data);
}


/**
* Messages admin.
*/
function reg_admin_settings_messages() {
	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();
	$settings = $factory->get_object("admin_settings_message");
	return($settings->messages());
}

function reg_admin_settings_messages_edit($id = "") {
	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();
	$settings = $factory->get_object("admin_settings_message");
	return(reg_admin_settings_message::edit($id));
}

function reg_admin_settings_message_form($id) {
	$factory = new reg_factory();
	$settings = $factory->get_object("admin_settings_message");
	return($settings->form($id));
}

function reg_admin_settings_message_form_validate($form_id, $data) {
	$factory = new reg_factory();
	$settings = $factory->get_object("admin_settings_message");
	return($settings->form_validate($form_id, $data));
}

function reg_admin_settings_message_form_submit($form_id, $data) {
	$factory = new reg_factory();
	$settings = $factory->get_object("admin_settings_message");
	return($settings->form_submit($form_id, $data));
}

/**
* Membership level editing stuff.
*/
function reg_admin_levels() {
	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();
	return(reg_admin_level::levels());
}

function reg_admin_levels_edit($id = "") {
	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();
	return(reg_admin_level::levels_edit($id));
}

function reg_admin_level_form($id) {
	return(reg_admin_level::level_form($id));
}

function reg_admin_level_form_validate($form_id, $data) {
	reg_admin_level::level_form_validate($form_id, $data);
}

function reg_admin_level_form_submit($form_id, $data) {
	reg_admin_level::level_form_submit($form_id, $data);
}

/**
* Viewing recent registrations.
*/
function reg_admin_members() {
	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();
	return(reg_admin_member::recent());
}

function reg_admin_members_view($id) {
	return(reg_admin_member::view_reg($id));
}

function reg_admin_members_edit($id) {
	return(reg_admin_member::edit_reg($id));
}

/**
* Our "Add a note" form.
*/
function reg_admin_members_add_note($id) {
	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();
	return(reg_admin_member::add_note($id));
}

function reg_admin_members_add_note_form($id) {
	return(reg_admin_member::add_note_form($id));
}

function reg_admin_members_add_note_form_validate($form_id, &$data) {
	return(reg_admin_member::add_note_form_validate($form_id, $data));
}

function reg_admin_members_add_note_form_submit($form_id, &$data) {
	return(reg_admin_member::add_note_form_submit($form_id, $data));
}


/**
* Cancellation form for admins.
*/
function reg_admin_members_cancel($id) {
	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();
	return(reg_admin_cancel::cancel($id));
}

function reg_admin_members_cancel_form($id) {
	return(reg_admin_cancel::form($id));
}

function reg_admin_members_cancel_form_validate($form_id, $data) {
	return(reg_admin_cancel::form_validate($form_id, $data));
}

function reg_admin_members_cancel_form_submit($form_id, $data) {
	return(reg_admin_cancel::form_submit($form_id, $data));
}


/**
* Balance adjustments
*/
function reg_admin_members_adjust($id) {
	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();
	return(reg_admin_adjust::adjust($id));
}

function reg_admin_members_adjust_form($id) {
	return(reg_admin_adjust::form($id));
}

function reg_admin_members_adjust_form_validate($form_id, $data) {
	return(reg_admin_adjust::form_validate($form_id, $data));
}

function reg_admin_members_adjust_form_submit($form_id, $data) {
	return(reg_admin_adjust::form_submit($form_id, $data));
}


/**
* Searching registrations.
*/
function reg_admin_search() {
	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();

	$retval = reg_admin_search::search();
	$retval .= reg_admin_search::results();
	return($retval);
}

function reg_admin_search_form() {
	return(reg_admin_search::search_form());
	return($retval);
}

function reg_admin_search_form_validate($form_id, &$data) {
	reg_admin_search::search_validate($form_id, $data);
}

function reg_admin_search_form_submit($form_id, &$data) {
	return(reg_admin_search::search_submit($form_id, $data));
}


/**
* Adding a new registration.
*/
function reg_admin_members_add() {

	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();

	return(reg_admin_member::add_reg());
}

/**
* Viewing logs.
*/
function reg_admin_log() {

	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();

	return(reg_admin_log::log_recent());
}

function reg_admin_log_detail($id) {
	return(reg_admin_log::log_detail($id));
}

function reg_admin_trans() {
	return(reg_admin_log::trans_recent());
}

function reg_admin_trans_detail($id) {
	return(reg_admin_log::trans_detail($id));
}

function reg_admin_main() {

	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();

	$admin = $factory->get_object("admin");
	return($admin->main());

}

/**
* Viewing registration stats.
*/
function reg_admin_stats() {

	$factory = new reg_factory();
	$reg = $factory->get_object("reg");
	$reg->force_ssl();

return("This is where our stats page would go.");
}


/**
* Our theme function for creating form elements in the reg system.
*/
function theme_reg_theme($form) {
	$factory = new reg_factory();
	$theme = $factory->get_object("theme");
	$retval = $theme->theme($form);
	return($retval);
}


/* Developers only!  Uncomment this to clear out the databsae.
include("reg.install");
reg_wipe();
reg_install();
*/

