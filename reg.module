<?php
/**
* Anthrocon's registration module.
*
* This code is copyright 2008 by Douglas Muth.  Permission is granted
*	to redistribute under the Gnu Public License.
*
* Additional module building info:
*	http://drupal.org/node/82920
*	http://api.drupal.org/
*
*/


/**
* Define our autoloader, and register it.
*/
function reg_autoload($class) {
	//print "TEST1: $class<br>\n";
	$class = str_replace("_", "/", $class);
	//print "TEST2: $class<br>\n";
	$file = $class . ".class.php";
	//print "TEST3: $file<br>\n";
	include_once($file);
}

spl_autoload_register("reg_autoload");


/**
* Our list of permissions
*/
function reg_perm() {
	return(reg::perm());
}


/**
* Create our menu items.
*/
function reg_menu($may_cache) {

	$items = reg_menu::menu($may_cache);

	return($items);

} // End of reg_menu()


/**
* Our public verification page.
*/
function reg_verify() {
	reg::force_ssl();
	$retval = reg_verify::verify();
	return($retval);
} 

function reg_verify_form() {
	return(reg_verify::verify_form());
	return($retval);
}

function reg_verify_form_validate($form_id, &$data) {
	reg_verify::verify_validate($form_id, $data);
}

function reg_verify_form_submit($form_id, &$data) {
	return(reg_verify::verify_submit($form_id, $data));
}


/**
* Our public registration page.
*/
function reg_registration() {
	reg::force_ssl();
	return(reg::registration());
}

function reg_registration_form($id = "") {
	return(reg_form::reg($id));
}

function reg_registration_form_validate($form_id, &$data) {
	reg_form::reg_validate($form_id, $data);
}

function reg_registration_form_submit($form_id, &$data) {
	return(reg_form::reg_submit($form_id, $data));
}


/**
* Our settings form.
*/
function reg_admin_settings() {
	reg::force_ssl();
	return(reg_admin::settings());
}

function reg_admin_settings_form() {
	return(reg_admin::settings_form());
}

function reg_admin_settings_form_validate($form_id, $data) {
	reg_admin::settings_form_validate($form_id, $data);
}

function reg_admin_settings_form_submit($form_id, $data) {
	reg_admin::settings_form_submit($form_id, $data);
}

/**
* Membership level editing stuff.
*/
function reg_admin_levels() {
	reg::force_ssl();
	return(reg_admin_level::levels());
}

function reg_admin_levels_edit($id = "") {
	reg::force_ssl();
	return(reg_admin_level::levels_edit($id));
}

function reg_admin_level_form($id) {
	return(reg_admin_level::level_form($id));
}

function reg_admin_level_form_validate($form_id, $data) {
	reg_admin_level::level_form_validate($form_id, $data);
}

function reg_admin_level_form_submit($form_id, $data) {
	reg_admin_level::level_form_submit($form_id, $data);
}

/**
* Viewing recent registrations.
*/
function reg_admin_members() {
	reg::force_ssl();
	return(reg_admin_member::recent());
}

function reg_admin_members_view($id) {
	return(reg_admin_member::view_reg($id));
}

function reg_admin_members_edit($id) {
	return(reg_admin_member::edit_reg($id));
}

/**
* Our "Add a note" form.
*/
function reg_admin_members_add_note($id) {
	reg::force_ssl();
	return(reg_admin_member::add_note($id));
}

function reg_admin_members_add_note_form($id) {
	return(reg_admin_member::add_note_form($id));
}

function reg_admin_members_add_note_form_validate($form_id, &$data) {
	return(reg_admin_member::add_note_form_validate($form_id, $data));
}

function reg_admin_members_add_note_form_submit($form_id, &$data) {
	return(reg_admin_member::add_note_form_submit($form_id, $data));
}


/**
* Cancellation form for admins.
*/
function reg_admin_members_cancel($id) {
	reg::force_ssl();
	return(reg_admin_cancel::cancel($id));
}

function reg_admin_members_cancel_form($id) {
	return(reg_admin_cancel::form($id));
}

function reg_admin_members_cancel_form_validate($form_id, $data) {
	return(reg_admin_cancel::form_validate($form_id, $data));
}

function reg_admin_members_cancel_form_submit($form_id, $data) {
	return(reg_admin_cancel::form_submit($form_id, $data));
}


/**
* Balance adjustments
*/
function reg_admin_members_adjust($id) {
	reg::force_ssl();
	return(reg_admin_adjust::adjust($id));
}

function reg_admin_members_adjust_form($id) {
	return(reg_admin_adjust::form($id));
}

function reg_admin_members_adjust_form_validate($form_id, $data) {
	return(reg_admin_adjust::form_validate($form_id, $data));
}

function reg_admin_members_adjust_form_submit($form_id, $data) {
	return(reg_admin_adjust::form_submit($form_id, $data));
}


/**
* Searching registrations.
*/
function reg_admin_search() {
	reg::force_ssl();
	$retval = reg_admin_search::search();
	$retval .= reg_admin_search::results();
	return($retval);
}

function reg_admin_search_form() {
	return(reg_admin_search::search_form());
	return($retval);
}

function reg_admin_search_form_validate($form_id, &$data) {
	reg_admin_search::search_validate($form_id, $data);
}

function reg_admin_search_form_submit($form_id, &$data) {
	return(reg_admin_search::search_submit($form_id, $data));
}


/**
* Adding a new registration.
*/
function reg_admin_members_add() {
	reg::force_ssl();
	return(reg_admin_member::add_reg());
}

/**
* Viewing logs.
*/
function reg_admin_log() {
	reg::force_ssl();
	return(reg_admin_log::log_recent());
}

function reg_admin_log_detail($id) {
	return(reg_admin_log::log_detail($id));
}

function reg_admin_trans() {
	return(reg_admin_log::trans_recent());
}

function reg_admin_trans_detail($id) {
	return(reg_admin_log::trans_detail($id));
}

function reg_admin_main() {
	reg::force_ssl();
	return(reg_admin::main());
}

/**
* Viewing registration stats.
*/
function reg_admin_stats() {
	reg::force_ssl();
return("This is where our stats page would go.");
}


/**
* Our theme function for creating form elements in the reg system.
*/
function theme_reg_theme($form) {
	return(reg_theme::theme($form));
}


/*
include("reg.install");
reg_wipe();
reg_install();
*/

// TEST
//print "<pre>"; print_r(reg_data::get_valid_levels()); print "</pre>";

//print "TEST: " . reg::is_admin();
//include_once("reg.class.php");
//echo "TEST";
//echo "badge NUM: " . reg::get_badge_num() . "<br>\n";
//print "TEST2: " . print_r(reg::get_types(), true) . "<br>\n";
//print "TEST3: " . print_r(reg::get_statuses(), true) . "<br>\n";
//print "TEST4: " . print_r(reg::get_cc_types(), true) . "<br>\n";


