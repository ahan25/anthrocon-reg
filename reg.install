<?php
/**
* Our installer file for the registration system.  At this time, only 
* MySQL is supported.  Sorry, Postgres folks!
*/


include_once("reg.class.php");


/**
* Define our schema.
*/
function reg_schema() {

	$retval = array();

	//
	// Reg table.  Holds registrations.
	// In order for a registration to get in here, the credit card
	// must have been charged successfully or entered manually by 
	// an admin.
	//
	$retval["reg"] = array(

		"fields" => array(
			"id" => array("type" => "serial"),
			"created" => array("type" => "int", "not null" => true, "default" => "0"),
			"modified" => array("type" => "int", "not null" => true, "default" => "0"),
			"year" => array("type" => "int", "not null" => true),
			//
			// The membership type.  
			// Values are stored in the reg_type table.
			//
			"reg_type_id" => array("type" => "int", "not null" => true),
			//
			// The membership status.
			// Values are stored in the reg_status
			//
			"reg_status_id" => array("type" => "int", "not null" => true),
			//
			// Badge number and name.  The badge name can be blank.
			//
			"badge_num" => array("type" => "int", "not null" => false),
			"badge_name" => array("type" => "varchar", "length" => 255),
			//
			// Basic info on the badge holder
			//
			"first" => array("type" => "varchar", "length" => 255),
			"middle" => array("type" => "varchar", "length" => 255),
			"last" => array("type" => "varchar", "length" => 255),
			//
			// Timestamp for the member's birthday.
			// Note that this is NOT a time_t, because negative
			// time_ts (dates before 1970) can be a real problem.
			// We only need resolution to the nearest day anyway,
			// so timezones are not an issue.
			//
			"birthdate" => array("type" => "datetime", "not null" => true),

			//
			// Address information (i.e., where the member lives)
			//
			"address1" => array("type" => "varchar", "length" => 255),
			"address2" => array("type" => "varchar", "length" => 255),
			"city" => array("type" => "varchar", "length" => 255),
			"state" => array("type" => "varchar", "length" => 255),
			"zip" => array("type" => "varchar", "length" => 255),
			"country" => array("type" => "varchar", "length" => 255),

			//
			// Shipping information.
			//
			"shipping_name" => array("type" => "varchar", "length" => 255),
			"shipping_address1" => array("type" => "varchar", "length" => 255),
			"shipping_address2" => array("type" => "varchar", "length" => 255),
			"shipping_city" => array("type" => "varchar", "length" => 255),
			"shipping_state" => array("type" => "varchar", "length" => 255),
			"shipping_zip" => array("type" => "varchar", "length" => 255),
			"shipping_country" => array("type" => "varchar", "length" => 255),

			//
			// If true, do not send a physical receipt.
			//
			"no_receipt" => array("type" => "varchar", "length" => 1),

			"email" => array("type" => "varchar", "length" => 255),
			"phone" => array("type" => "varchar", "length" => 255),

			//
			// Shirt size for Sponsors and Super Sponsors
			//
			"shirt_size_id" => array("type" => "int"),

			//
			// The user's balance for badge costs, donations, and total costs.
			// This is updated anytime there is a transaction logged
			//  in reg_trans.
			//
			"badge_cost" => array("type" => "float", "default" => "0"),
			"donation" => array("type" => "float", "default" => "0"),

			//
			// How much the member "owes" us.  This is only meaningful 
			// for onsite registrations.
			//
			"badge_cost_due" => array("type" => "float", "default" => "0"),
			"donation_due" => array("type" => "float", "default" => "0"),

			//
			// The total amount of money that the member has given us.
			//
			"total_cost" => array("type" => "float", "default" => "0"),
			),

		"indexes" => array(
			"reg_year" => array("year"),
			),

		"unique keys" => array(
			"reg_year_badge_num" => array("year", "badge_num"),
			), 

		"primary key" => array("id"),

		);


	//
	// Our different membership types, such as "sponsor", "staff", etc.
	// This is mainly for what gets printed on the badges and how the
	// user is referred to.  One of the reasons for this t able is that
	// the user can have multiple membertype types, such as 
	// "staff/sponsor", but this doesn't happen often enough (nor are 
	// there enough combinations) to make it necessary for setting up
	// a many-to-many relationship.
	//
	$retval["reg_type"] = array(
		"fields" => array(
			"id" => array("type" => "serial"),
			"weight" => array("type" => "int", "default" => "0"),
			"member_type" => array("type" => "varchar", "length" => "255"),
			),
		"primary key" => array("id"),
		
		);


	//
	// Our different membership statuses.
	//
	$retval["reg_status"] = array(
		"fields" => array(
			"id" => array("type" => "serial"),
			"status" => array("type" => "varchar", "length" => "255"),
			"weight" => array("type" => "int", "default" => "0"),
			"detail" => array("type" => "varchar", "length" => "255"),
			),
		"primary key" => array("id"),
		);


	//
	// Our different membership levels, such as member, sponsor, etc.
	// It is consulted when printing up the main registration form.
	//
	$retval["reg_level"] = array(
		"fields" => array(

			"id" => array("type" => "serial"),

			//
			// The human-readable name 
			//
			"name" => array("type" => "varchar", "length" => "255"),

			//
			// What year the leve is for?  This allows us to have historic 
			// data.
			//
			"year" => array("type" => "int"),

			//
			// The membership type.  
			// Values are stored in the reg_type table.
			//
			"reg_type_id" => array("type" => "int", "not null" => true),

			//
			// How much does this cost?
			//
			"price" => array("type" => "float"),

			//
			// How long the membership type is available.
			//
			"start" => array("type" => "int", "not null" => true, "default" => "0"),
			"end" => array("type" => "int", "not null" => true, "default" => "0"),

			//
			// Description that is shown to the user
			//
			"description" => array("type" => "text"),

			//
			// Internal notes
			//
			"notes" => array("type" => "text"),

			),
		"primary key" => array("id"),
		);


	//
	// This table holds transactions related to registrations.
	// Note that if an initial transaction was not successful, it will
	// not go in here, since the registration would not have gone 
	// through.  However, there will still be a record in reg_log.
	//
	$retval["reg_trans"] = array(

		"fields" => array(
			"id" => array("type" => "serial"),

			//
			// Foreign key to the registration table. (optional)
			//
			"reg_id" => array("type" => "int", "not null" => true),

			//
			// Timestamp
			//
			"date" => array("type" => "int", "not null" => true, "default" => "0"),

			//
			// User ID
			//
			"uid" => array("type" => "int"),

			//
			// Foreign key to the reg_trans_gateway_id table
			//
			"reg_trans_gateway_id" => array("type" => "int"),

			//
			// Auth code or other unique value that references a successful
			// transaction from our gateway.
			//
			"gateway_auth_code" => array("type" => "varchar", "length" => "255"),

			//
			// The unique transaction ID that the gateway returns
			//
			"gateway_transaction_id" => array("type" => "varchar", "length" => "255"),

			//
			// The unique invoice number that we make up to send to the 
			// gateway.  This may be optional with some gateways, but with
			// authorize.net, we do this to keep from having multiple
			// memberships being bought with the same card treated as 
			// duplicate transactions.
			//
			// This number is entirely internal and we probably don't want
			// to show this to any customers.
			//
			"invoice_number" => array("type" => "varchar", "length" => "255"),

			//
			// What the gateway had to say about the AVS data and CVV codes.
			// (i.e., the gateway responses)
			//
			"gateway_avs" => array("type" => "varchar", "length" => "1"),
			"gateway_cvv" => array("type" => "varchar", "length" => "1"),

			//
			// Foreign key to the log table.  This is when linking to log 
			// entries which may contain more information.
			//
			"reg_log_id" => array("type" => "int"),

			//
			// Is this a purchase, refund, upgrade, etc.?
			// Full list in reg::get_trans_type()
			//
			"reg_trans_type_id" => array("type" => "int", "not null" => true),

			//
			// How was the membership paid for?
			// cc, cash, check, comp, volunteer, board, staff, etc.
			// Full list in reg::get_payment_type()
			//
			"reg_payment_type_id" => array("type" => "int", "not null" => true),

			//
			// Basic info on the badge holder
			//
			"first" => array("type" => "varchar", "length" => "255"),
			"middle" => array("type" => "varchar", "length" => "255"),
			"last" => array("type" => "varchar", "length" => "255"),
			"address1" => array("type" => "varchar", "length" => "255"),
			"address2" => array("type" => "varchar", "length" => "255"),
			"city" => array("type" => "varchar", "length" => "255"),
			"state" => array("type" => "varchar", "length" => "255"),
			"zip" => array("type" => "varchar", "length" => "255"),
			"country" => array("type" => "varchar", "length" => "255"),

			//
			// Shipping information.
			//
			"shipping_name" => array("type" => "varchar", "length" => "255"),
			"shipping_address1" => array("type" => "varchar", "length" => "255"),
			"shipping_address2" => array("type" => "varchar", "length" => "255"),
			"shipping_city" => array("type" => "varchar", "length" => "255"),
			"shipping_state" => array("type" => "varchar", "length" => "255"),
			"shipping_zip" => array("type" => "varchar", "length" => "255"),
			"shipping_country" => array("type" => "varchar", "length" => "255"),

			//
			// Credit card info.
			// The "num" is really the last 4 digits.  We don't want to
			// store any actual card numbers here.
			//
			"reg_cc_type_id" => array("type" => "int"),
			"cc_num" => array("type" => "varchar", "length" => "255"),

			//
			// Timestamp for when the card expires.
			// This will equate to the first day of the month.
			//
			"card_expire" => array("type" => "int", "not null" => true, "default" => "0"),

			//
			// badge_cost is the money that their paid (or were refunded)
			// for their membership.
			// donation is any additional amount that was donated.
			// total_cost is the total of the previous two fields.
			// Anytime these are updated, the code should be update the same
			// named fields in the reg table to reflect the new balance.
			//
			"badge_cost" => array("type" => "float", "default" => "0.00"),
			"donation" => array("type" => "float", "default" => "0.00"),
			"total_cost" => array("type" => "float", "default" => "0.00"),

			),

		"indexes" => array(
			"reg_trans_reg_id" => array("reg_id"),
			"reg_log_uid" => array("uid"),
			),

		"primary key" => array("id"),
		);


	$retval["reg_trans_gateway"] = array(
		"fields" => array(
			"id" => array("type" => "serial"),
			"gateway" => array("type" => "varchar", "length" => "255"),
			//
			// URL for the front page of the gateway.  This is just so we
			// can display something for the user to click on.
			// If we need a URL code charging credit cards, that should just
			// go in the code for that gateway.
			//
			"url" => array("type" => "varchar", "length" => "255"),
		),

		"primary key" => array("id"),

	);


	//
	// This table holds the different credit card types
	//
	$retval["reg_cc_type"] = array(

		"fields" => array(
			"id" => array("type" => "serial"),
			"cc_type" => array("type" => "varchar", "length" => "255"),
		),

		"primary key" => array("id"),

	);

	
	//
	// This table holds our different transaction types.
	//
	$retval["reg_trans_type"] = array(
		"fields" => array(
			"id" => array("type" => "serial"),
			"trans_type" => array("type" => "varchar", "length" => "255"),
			),

		"primary key" => array("id"),
	);

		
	//
	// This table holds our different payment types
	//
	$retval["reg_payment_type"] = array(
		"fields" => array(
			"id" => array("type" => "serial"),
			"payment_type" => array("type" => "varchar", "length" => "255"),
			"weight" => array("type" => "int", "default" => "0"),
		),

		"primary key" => array("id"),
		);


	//
	// This table is a log of all registration system activity.
	// All registrations, unsuccessful charges, records of manual 
	// registrations, manual resending of emails, etc. is all kept here.
	//
	$retval["reg_log"] = array(
		"fields" => array(
			"id" => array("type" => "serial"),
		
			//
			// Foreign key to the registration table. (optional)
			//
			"reg_id" => array("type" => "int"),

			//
			// User ID
			//
			"uid" => array("type" => "int"),

			//
			// Timestamp
			//
			"date" => array("type" => "int", "not null" => true, "default" => "0"),

			//
			// URL info
			//
			"url" => array("type" => "varchar", "length" => "255"),
			"referrer" => array("type" => "varchar", "length" => "255"),
			"remote_addr" => array("type" => "varchar", "length" => "255"),

			//
			// Severity.  Same as in the watchdog table.
			//
			"severity" => array("type" => "int"),

			//
			// The message
			//
			"message" => array("type" => "text"),
		),

		"indexes" => array(
			"reg_log_uid" => array("uid"),
			"reg_log_reg_id" => array("reg_id"),
			),

		"primary key" => array("id"),
		);

	//
	// Create our table that holds years and the most recent badge 
	// number.  This table will be accessed by reg::get_badge_num().
	//
	$retval["reg_badge_num"] = array(
		"fields" => array(
			"year" => array("type" => "int"),
			"badge_num" => array("type" => "int", "not null" => true),
		),

		"primary key" => array("year"),
		);


	//
	// All possible shirt sizes
	//
	$retval["reg_shirt_size"] = array(
		"fields" => array(
			"id" => array("type" => "serial"),
			"disabled" => array("type" => "varchar", "length" => "1", "default" => null),
			"shirt_size" => array("type" => "varchar", "length" => "255"),
			),

		"primary key" => array("id"),
		);


	//
	// This table holds separate messages which we will display to the 
	// user at various points in our registration system.
	//
	$retval["reg_message"] = array(
		"fields" => array(
			"id" => array("type" => "serial"),
			"name" => array("type" => "varchar", "length" => "255"),
			"subject" => array("type" => "varchar", "length" => "255"),
		
			//
			// The type of message.  It can be "message" or "email".
			// The difference is that emails have subject lines associated
			// with them.
			//
			"type" => array("type" => "varchar", "length" => "255", "default" => "message"),
			"value" => array("type" => "text"),

			//
			// Internal notes
			//
			"notes" => array("type" => "text"),

		),

		"unique keys" => array(
			"reg_message_name" => array("name"),
			),

		"primary key" => array("id"),

		);


	//
	// Our Watchlist.  This contains names of people who owe us money, 
	// are not welcome at the con, etc.
	//
	$retval["reg_watchlist"] = array(

		"fields" => array(
			"id" => array("type" => "serial"),

			//
			// Real name of the individual
			//
			"first" => array("type" => "varchar", "length" => "255", "not null" => true),
			"last" => array("type" => "varchar", "length" => "255", "not null" => true),

			//
			// Aliases for the first name.  This may be a regular expression.
			// However, it will only be checked if the last name matches a 
			// particular member, so we don't kill the CPU.
			//
			"first_alias" => array("type" => "varchar", "length" => "255"),

			//
			// Action to take if they try to register.  This will be 
			// displayed to the user they edit the member's record in 
			// an error box.
			//
			"action" => array("type" => "text", "not null" => true),

			//
			// The reason why someone is on the watchlist.
			//
			"reason" => array("type" => "text", "not null" => true,
				"default" => ""),

			//
			// Is the current entry disabled?  Empty string means no, 
			// anything else means yes.
			//
			"disabled" => array("type" => "varchar", "length" => "1", 
				"not null" => true, "default" => ""),

			),

		"primary key" => array("id"),
		);


	$retval["reg_print_jobs"] = array(

		"fields" => array(
			"id" => array("type" => "serial"),

			//
			// Reference to the badge that we're printing
			//
			"reg_id" => array("type" => "int", "not null" => true),

			//
			// What printer is this being sent to?  It can be a string
			// such as "default" for the default printer, or "minor" for the 
			// minor printer.
			//
			"printer" => array("type" => "varchar", "length" => "255", 
				"not null" => true, "default" => "default"),

			//
			// The status of the print job, such as "new", "printing", 
			// or "printed".
			//
			"status" => array("type" => "varchar", "length" => "255",
				"not null" => true, "default" => "new"),

			),

		"primary key" => array("id"),
		);

	return($retval);

} // End of reg_schema()

/**
* This function is called when the module is installed.
*
* @param boolean $testing If set to true, certain rows are not entered
*	into the database.  This is for testing/development purposes.
*/
function reg_install($testing = false) {

	drupal_install_schema("reg");

	if ($testing) {
		return(null);
	}

	$db = $GLOBALS["db_type"];

	if ($db == "mysql" || $db == "mysqli") {

		$query = "INSERT INTO {reg_type} (member_type) "
			. "VALUES "
			. "('Attending'), "
			. "('Sponsor'), "
			. "('Super Sponsor'), "
			. "('Dealer'), "
			. "('Dealer Asst.'), "
			. "('Staff'), "
			. "('Board'), "
			. "('Guest'), "
			. "('Guest of Honor'), "
			. "('Friday'), "
			. "('Saturday'), "
			. "('Sunday') "
			;

		db_query($query);
		
		$query = "INSERT INTO {reg_status} (status, weight, detail) "
			. "VALUES "
			. "('Complete', 0, 'Badge is paid'), "
			. "('Defer', 0, 'Badge is deferred until next year'), "
			. "('Refund', 0, 'Badge was refunded'), "
			. "('New', -1, 'Badge has been entered, but not yet paid for'), "
			. "('Invalid', 1, 'This badge should have never happened. (testing, etc.)') "
			;
		db_query($query);

		$query = "INSERT INTO {reg_trans_gateway} (gateway, url) "
			. "VALUES "
			. "('Authorize.net', 'http://www.authorize.net/')"
			;
		db_query($query);

		$query = "INSERT INTO {reg_cc_type} (cc_type) "
			. "VALUES "
			. "('MasterCard'), "
			. "('Visa'), "
			//. "('American Express'), "
			. "('Discover') "
			;
		db_query($query);

		$query = "INSERT INTO {reg_trans_type} (trans_type) "
			. "VALUES "
			. "('Purchase'), "
			. "('Refund'), "
			. "('Balance Adjustment'), "
			. "('Upgrade') "
			;
		db_query($query);

		$query = "INSERT INTO {reg_payment_type} (payment_type) "
			. "VALUES "
			. "('Credit Card'), "
			. "('Cash'), "
			. "('Check'), "
			. "('Comp'), "
			. "('Volunteer'), "
			. "('Board'), "
			. "('Staff'), "
			. "('Guest of Honor'), "
			. "('Guest'), "
			. "('Misc/Other') "
			;
		db_query($query);

		$query = "INSERT INTO {reg_shirt_size} (shirt_size) "
			. "VALUES "
			. "('Small'), "
			. "('Medium'), "
			. "('Large'), "
			. "('X-Large'), "
			. "('2X'), "
			. "('3X') "
			;
		db_query($query);

		$query = "INSERT INTO {reg_message} (name, subject, type, value, "
				. "notes) "
			. "VALUES "
			. "('no-levels-available', "
				. "'', "
				. "'message', "
				. "'Sorry, there are no membership levels currently available.', "
				. "'Shown when there are no membership levels available.'), "
			. "('header', "
				. "'', "
				. "'message', "
				. "'Welcome to our registration system!', "
				. "'Displayed at the top of the registration page..'), "
			. "('footer', "
				. "'', "
				. "'message', "
				. "'Thank you!', "
				. "'Displayed at the bottom of the registration page.'), "
			. "('verify', "
				. "'', "
				. "'message', "
				. "'Replace this with the verification text a user should see.',"
				. "'Displayed on the verification page.'), "
			. "('success', "
				. "'', "
				. "'message', "
				. "'Success message goes here. :-)',"
				. "'Displayed when there is a successful registration..'), "
			. "('email-receipt', "
				. "'Your Receipt', "
				. "'email', "
				. "'Placeholder for an emailed receipt.', "
				. "'This goes out when a user purchases a mebership on the "
					. "website.'), "
			. "('email-receipt-no-cc', "
				. "'Your Receipt', "
				. "'email', "
				. "'Placeholder for an emailed receipt with no credit card.', "
				. "'This would go out if a user has their receipt re-sent to "
					. "them, or if we manually re-send the receipt.'), "
			. "('cc-declined', "
				. "'', "
				. "'message', "
				. "'Sorry, but your card was declined.  Please try again..', "
				. "'Displayed when a member''s credit card is declined.'), "
			. "('cc-declined-cvv', "
				. "'', "
				. "'message', "
				. "'Sorry, but the Card Code does not appear to be valid.', "
				. "'Displayed when a CVV code is invalid.'), "
			. "('cc-declined-avs', "
				. "'', "
				. "'message', "
				. "'Sorry, but there was an AVS mismatch.', "
				. "'Displayed when an AVS code is invalid.'), "
			. "('cc-error', "
				. "'', "
				. "'message', "
				. "'The merchant gateway returned an error.', "
				. "'Displayed when authorize.net freaks out or similar.'), "
			. "('cc-no-amex', "
				. "'', "
				. "'message', "
				. "'At this time, we do not accept American Express.  Sorry', "
				. "''), "
			. "('onsite-thankyou', "
				. "'', "
				. "'message', "
				. "'You have registered successfully!  "
					. "Please wait for the next available agent, "
					. "and have a form of payment ready..', "
				. "'Display for a successful onsite registration.') "
				;

		db_query($query);

	} else if ($db == "pgsql") {
		$error = "We're sorry, but we don't have Postgres support in "
			. "this module.  ";
		drupal_set_message($error, "error");

	}

} // End of reg_install()


/**
* This function is called when the module is uninstalled after being disabled.
*/
function reg_uninstall() {
	drupal_uninstall_schema("reg");
} // End of reg_uninstall()


/**
* Our first (of many?) update functions.  These are called from update.php,
*	after someone installs an updated version of this module.
*
* To force the module back to an older version for testing of these update
*	functions, run this SQL command:
*
* UPDATE system SET schema_version=1 WHERE name='reg';
*
* Please check http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_update_N/7
*	for a handy lits of command SQL queries, and how to use them.
*
* Also worth checking is http://drupal.org/node/114774#hook-update-N
*
*/
function reg_update_6000() {

	$retval = array();
	db_add_field($retval, "reg_watchlist", "reason", array(
		"type" => "text",
		"not null" => true,
		"default" => "",
		));

	return($retval);

} // End of reg_update_6000()


/**
* This hook is run to check for our requirements.
*
* @param string $phase What phase we're in: install or runtime
*
* @return array An array of requirements and their statuses.
*/
function reg_requirements($phase) {

	$retval = array();

	$retval[] = reg_requirements_curl();
	$retval[] = reg_requirements_date_format();

	return($retval);

} // End of reg_requirements()


/**
* Check our cURL requirement
*
* @return array An array of curl requirements.
*/
function reg_requirements_curl() {

	$retval = array();

	//
	// Check for cURL
	//
	$retval["title"] = "Anthrocon Reg";
	$retval["description"] = "cURL support found";

	if (function_exists("curl_init")) {
		$retval["severity"] = REQUIREMENT_OK;

	} else {
		$retval["description"] = "cURL support is required in order to use this module. "
			. "Please read " . l("http://www.php.net/manual/en/book.curl.php", 
				"http://www.php.net/manual/en/book.curl.php") 
			. " for more info."
			;
		$retval["severity"] = REQUIREMENT_ERROR;

	}

	return($retval);

} // End of reg_requirements_curl()


/**
* Check our date forms.
*/
function reg_requirements_date_format() {

	$retval = array();

	//
	// Check our date format for sanity.
	//
	$retval["title"] = "Anthrocon Reg";
	$retval["description"] = "A format is properly set for the 'short' date format.";
	$retval["severity"] = REQUIREMENT_OK;
	$date_format_short = variable_get("date_format_short", "");
	$date_format_short_custom = variable_get("date_format_short_custom", "");
	if ($date_format_short == "" && $date_format_short_custom == "") {

			$retval["description"] = "The 'short' date format is set to custom "
				. "and is currently blank.  This MAY cause issues when "
				. "viewing the logs. Please go to the "
				. l("Date and time settings page", "admin/settings/date-time")
				. " and set a short date format."
				;
			$retval["severity"] = REQUIREMENT_WARNING;

	}

	return($retval);

} // End of reg_requirements_date_format()


