<?php
/**
* Our installer file for the registration system.  At this time, only 
* MySQL is supported.  Sorry, Postgres folks!
*/


include_once("reg.class.php");


/**
* This function is called when the module is installed.
*/
function reg_install() {

	$db = $GLOBALS["db_type"];

	if ($db == "mysql" || $db == "mysqli") {

		//
		// Reg table.  Holds registrations.
		// In order for a registration to get in here, the credit card
		// must have been charged successfully or entered manually by 
		// an admin.
		//
		$query = "CREATE TABLE {reg} ( "
			. "id INTEGER PRIMARY KEY AUTO_INCREMENT, "
			. "created INTEGER NOT NULL DEFAULT '0', "
			. "modified INTEGER NOT NULL DEFAULT '0', "
			//
			// 4-digit year
			//
			. "year INTEGER, "
			. "INDEX reg_year(year), "
			//
			// The membership type.  
			// Values are stored in the reg_type table.
			//
			. "reg_type_id INTEGER NOT NULL, "
			//
			// The membership status.
			// Values are stored in the reg_status
			//
			. "reg_status_id INTEGER NOT NULL, "
			//
			// Badge number and name.  The badge name can be blank.
			//
			. "badge_num INTEGER NOT NULL, "
			. "INDEX reg_year_badge_num(year, badge_num), "
			. "badge_name VARCHAR(255), "
			//
			// Basic info on the badge holder
			//
			. "first VARCHAR(255), "
			. "middle VARCHAR(255), "
			. "last VARCHAR(255), "
			//
			// Timestamp for the member's birthday
			//
			. "birthdate INTEGER NOT NULL DEFAULT '0', "

			. "address1 VARCHAR(255), "
			. "address2 VARCHAR(255), "
			. "city VARCHAR(255), "
			. "state VARCHAR(255), "
			. "zip VARCHAR(255), "
			. "country VARCHAR(255), "
			. "email VARCHAR(255), "
			. "phone VARCHAR(255), "
			//
			// Shirt size for Sponsors and Super Sponsors
			//
			. "shirt_size_id INTEGER, "
			//
			// The user's balance for badge costs, donations, and total costs.
			// This is updated anytime there is a transaction logged
			//  in reg_trans.
			//
			. "badge_cost DECIMAL(10, 2) DEFAULT 0.00, "
			. "donation DECIMAL(10, 2) DEFAULT 0.00, "
			. "total_cost DECIMAL(10, 2) DEFAULT 0.00 "
			. ")"
			;
		db_query($query);

		//
		// Our different membership types, such as "sponsor", "staff", etc.
		// This is mainly for what gets printed on the badges and how the
		// user is referred to.  One of the reasons for this t able is that
		// the user can have multiple membertype types, such as 
		// "staff/sponsor", but this doesn't happen often enough (nor are 
		// there enough combinations) to make it necessary for setting up
		// a many-to-many relationship.
		//
		$query = "CREATE TABLE {reg_type} ("
			. "id INTEGER PRIMARY KEY AUTO_INCREMENT, "
			. "weight INTEGER DEFAULT 0, "
			. "member_type VARCHAR(255) "
			. ") "
			;
		db_query($query);

		$query = "INSERT INTO {reg_type} (member_type) "
			. "VALUES "
			. "('Attending'), "
			. "('Sponsor'), "
			. "('Super Sponsor'), "
			. "('Dealer'), "
			. "('Dealer Asst.'), "
			. "('Staff'), "
			. "('Board'), "
			. "('Guest'), "
			. "('Guest of Honor'), "
			. "('Friday'), "
			. "('Saturday'), "
			. "('Sunday') "
			;
		db_query($query);

		//
		// Our different membership statuses.
		//
		$query = "CREATE TABLE {reg_status} ("
			. "id INTEGER PRIMARY KEY AUTO_INCREMENT, "
			. "status VARCHAR(255), "
			. "weight INTEGER DEFAULT 0, "
			. "detail VARCHAR(255) "
			. ")"
			;
		db_query($query);
		
		$query = "INSERT INTO {reg_status} (status, weight, detail) "
			. "VALUES "
			. "('Complete', 0, 'Badge is paid'), "
			. "('Defer', 0, 'Badge is deferred until next year'), "
			. "('Refund', 0, 'Badge was refunded'), "
			. "('New', -1, 'Badge has been entered, but not yet paid for') "
			;
		db_query($query);


		//
		// Our different membership levels, such as member, sponsor, etc.
		// It is consulted when printing up the main registration form.
		//
		$query = "CREATE TABLE {reg_level} ("
			. "id INTEGER PRIMARY KEY AUTO_INCREMENT, "

			//
			// The human-readable name 
			//
			. "name VARCHAR(255), "

			//
			// What year the leve is for?  This allows us to have historic 
			// data.
			//
			. "year INTEGER, "

			//
			// The membership type.  
			// Values are stored in the reg_type table.
			//
			. "reg_type_id INTEGER NOT NULL, "

			//
			// How much does this cost?
			//
			. "price DECIMAL(10,2), "

			//
			// How long the membership type is available.
			//
			. "start INTEGER NOT NULL DEFAULT '0', "
			. "end INTEGER NOT NULL DEFAULT '0', "

			//
			// Description that is shown to the user
			//
			. "description TEXT, "
			//
			// Internal notes
			//
			. "notes TEXT "

			. ")"
			;
		db_query($query);

		//
		// This table holds transactions related to registrations.
		// Note that if an initial transaction was not successful, it will
		// not go in here, since the registration would not have gone 
		// through.  However, there will still be a record in reg_log.
		//
		$query = "CREATE TABLE {reg_trans} ( "
			. "id INTEGER PRIMARY KEY AUTO_INCREMENT, "
			//
			// Foreign key to the registration table. (optional)
			//
			. "reg_id INTEGER NOT NULL, "
			. "INDEX reg_trans_reg_id(reg_id), "

			//
			// Timestamp
			//
			. "date INTEGER NOT NULL DEFAULT '0', "

			//
			// User ID
			//
			. "uid INTEGER, "
			. "INDEX reg_log_uid(uid), "

			//
			// Foreign key to the reg_trans_gateway_id table
			//
			. "reg_trans_gateway_id INTEGER, "

			//
			// Auth code or other unique value that references a successful
			// transaction from our gateway.
			//
			. "gateway_auth_code VARCHAR(255), "

			//
			// The unique transaction ID that the gateway returns
			//
			."gateway_transaction_id VARCHAR(255), "

			//
			// The unique invoice number that we make up to send to the 
			// gateway.  This may be optional with some gateways, but with
			// authorize.net, we do this to keep from having multiple
			// memberships being bought with the same card treated as 
			// duplicate transactions.
			//
			// This number is entirely internal and we probably don't want
			// to show this to any customers.
			//
			."invoice_number VARCHAR(255), "

			//
			// What the gateway had to say about the AVS data and CVV codes.
			// (i.e., the gateway responses)
			//
			. "gateway_avs CHAR(1), "
			. "gateway_cvv CHAR(1), "

			//
			// Foreign key to the log table.  This is when linking to log 
			// entries which may contain more information.
			//
			. "reg_log_id INTEGER, "

			//
			// Is this a purchase, refund, upgrade, etc.?
			// Full list in reg::get_trans_type()
			//
			. "reg_trans_type_id INTEGER NOT NULL, "
			//
			// How was the membership paid for?
			// cc, cash, check, comp, volunteer, board, staff, etc.
			// Full list in reg::get_payment_type()
			//
			. "reg_payment_type_id INTEGER NOT NULL, "

			//
			// Basic info on the badge holder
			//
			. "first VARCHAR(255), "
			. "middle VARCHAR(255), "
			. "last VARCHAR(255), "
			. "address1 VARCHAR(255), "
			. "address2 VARCHAR(255), "
			. "city VARCHAR(255), "
			. "state VARCHAR(255), "
			. "zip VARCHAR(255), "
			. "country VARCHAR(255), "

			//
			// Credit card info.
			// The "num" is really the last 4 digits.  We don't want to
			// store any actual card numbers here.
			//
			. "reg_cc_type_id INTEGER, "
			. "cc_num VARCHAR(255), "

			//
			// Timestamp for when the card expires.
			// This will equate to the first day of the month.
			//
			. "card_expire INTEGER NOT NULL DEFAULT '0', "

			//
			// badge_cost is the money that their paid (or were refunded)
			// for their membership.
			// donation is any additional amount that was donated.
			// total_cost is the total of the previous two fields.
			// Anytime these are updated, the code should be update the same
			// named fields in the reg table to reflect the new balance.
			//
			. "badge_cost DECIMAL(10, 2) DEFAULT 0.00, "
			. "donation DECIMAL(10, 2) DEFAULT 0.00, "
			. "total_cost DECIMAL(10, 2) DEFAULT 0.00 "

			. ")"
			;
		db_query($query);


		$query = "CREATE TABLE {reg_trans_gateway} ("
			. "id INTEGER PRIMARY KEY AUTO_INCREMENT, "
			. "gateway VARCHAR(255), "
			//
			// URL for the front page of the gateway.  This is just so we
			// can display something for the user to click on.
			// If we need a URL code charging credit cards, that should just
			// go in the code for that gateway.
			//
			. "url VARCHAR(255) "
			. ")"
			;
		db_query($query);

		$query = "INSERT INTO {reg_trans_gateway} (gateway, url) "
			. "VALUES "
			. "('Authorize.net', 'http://www.authorize.net/')"
			;
		db_query($query);


		//
		// This table holds the different credit card types
		//
		$query = "CREATE TABLE {reg_cc_type} ("
			. "id INTEGER PRIMARY KEY AUTO_INCREMENT, "
			. "cc_type VARCHAR(255) "
			. ")"
			;
		db_query($query);

		$query = "INSERT INTO {reg_cc_type} (cc_type) "
			. "VALUES "
			. "('MasterCard'), "
			. "('Visa'), "
			//. "('American Express'), "
			. "('Discover') "
			;
		db_query($query);

		//
		// This table holds our different transaction types.
		//
		$query = "CREATE TABLE {reg_trans_type} ("
			. "id INTEGER PRIMARY KEY AUTO_INCREMENT, "
			. "trans_type VARCHAR(255) "
			. ")"
			;
		db_query($query);

		$query = "INSERT INTO {reg_trans_type} (trans_type) "
			. "VALUES "
			. "('Purchase'), "
			. "('Refund'), "
			. "('Balance Adjustment'), "
			. "('Upgrade') "
			;
		db_query($query);

		//
		// This table holds our different payment types
		//
		$query = "CREATE TABLE {reg_payment_type} ("
			. "id INTEGER PRIMARY KEY AUTO_INCREMENT, "
			. "payment_type VARCHAR(255), "
			. "weight INTEGER DEFAULT 0 "
			. ")"
			;
		db_query($query);

		$query = "INSERT INTO {reg_payment_type} (payment_type) "
			. "VALUES "
			. "('Credit Card'), "
			. "('Cash'), "
			. "('Check'), "
			. "('Comp'), "
			. "('Volunteer'), "
			. "('Board'), "
			. "('Staff'), "
			. "('Guest of Honor'), "
			. "('Guest'), "
			. "('Misc/Other') "
			;
		db_query($query);

		//
		// This table is a log of all registration system activity.
		// All registrations, unsuccessful charges, records of manual 
		// registrations, manual resending of emails, etc. is all kept here.
		//
		$query = "CREATE TABLE {reg_log} ( "
			. "id INTEGER PRIMARY KEY AUTO_INCREMENT, "
			//
			// Foreign key to the registration table. (optional)
			//
			. "reg_id INTEGER, "
			. "INDEX reg_log_reg_id(reg_id), "
			//
			// User ID
			//
			. "uid INTEGER, "
			. "INDEX reg_log_uid(uid), "
			//
			// Timestamp
			//
			. "date INTEGER NOT NULL DEFAULT '0', "
			//
			// URL info
			//
			. "url VARCHAR(255), "
			. "referrer VARCHAR(255), "
			. "remote_addr VARCHAR(32), "
			//
			// Severity.  Same as in the watchdog table.
			//
			. "severity TINYINT(3) UNSIGNED, "
			//
			// The message
			//
			. "message TEXT "
			. ")";
			;
		db_query($query);

		//
		// Create our table that holds years and the most recent badge 
		// number.  This table will be accessed by reg::get_badge_num().
		//
		$query = "CREATE TABLE {reg_badge_num} ("
			. "year INTEGER PRIMARY KEY, "
			. "badge_num INTEGER NOT NULL "
			. ")";
		db_query($query);

		//
		// Insert our initial badge number.
		//
		$year = reg::YEAR;
		$badge_num = reg::START_BADGE_NUM;
		$query = "INSERT INTO {reg_badge_num} "
			. "VALUES ($year, $badge_num) "
			;
		db_query($query);


		//
		// All possible shirt sizes
		//
		$query = "CREATE TABLE {reg_shirt_size} ("
			. "id INTEGER PRIMARY KEY AUTO_INCREMENT, "
			//
			// If non-null, this t-shirt size is disabled.
			//
			. "disabled CHAR(1) DEFAULT NULL, "
			. "shirt_size VARCHAR(255) "
			. ")"
			;
		db_query($query);

		$query = "INSERT INTO {reg_shirt_size} (shirt_size) "
			. "VALUES "
			. "('Small'), "
			. "('Medium'), "
			. "('Large'), "
			. "('X-Large'), "
			. "('2X'), "
			. "('3X') "
			;
		db_query($query);

		//
		// This table holds separate messages which we will display to the 
		// user at various points in our registration system.
		// 
		$query = "CREATE TABLE {reg_message} ("
			. "id INTEGER PRIMARY KEY AUTO_INCREMENT, "
			//
			// A unique "short name" used for identifying our separate mesages.
			//
			. "name VARCHAR(255), "
			. "UNIQUE INDEX reg_message_name(name), "
			. "value TEXT, "
			//
			// Internal notes
			//
			. "notes TEXT "
			. ")"
			;
		db_query($query);

		$query = "INSERT INTO {reg_message} (name, value, notes) "
			. "VALUES "
			. "('no-levels-available', "
				. "'Placeholder message for no membership levels available.', "
				. "'Test note.'), "
			. "('header', "
				. "'Placeholder for text that goes at the top of the "
					. "Registration page.', "
				. "'Test note 2.'), "
			. "('verify', "
				. "'Please fill out all of the fields below to verify "
					. "your memberships. If you experience problems, "
					. "feel free to contact us at ''!email''',"
				. "'Test note 3.'), "
			. "('success', "
				. "'Placeholder for a succesful registration', "
				. "'Test note 4.'), "
			. "('email-receipt', "
				. "'Placeholder for an emailed receipt.', "
				. "'This goes out when a user purchases a mebership on the "
					. "website.'), "
			. "('email-receipt-no-cc', "
				. "'Placeholder for an emailed receipt with no credit card.', "
				. "'This would go out if a user has their receipt re-sent to "
					. "them, or if we manually re-send the receipt.'), "
			. "('cc-declined', "
				. "'Placeholder for a declined card.', "
				. "'Display when a member''s credit card is declined.'), "
			. "('cc-error', "
				. "'Placeholder for a carc charging error.', "
				. "'Display when authorize.net freaks out or similar.') "
			;

		db_query($query);

	} else if ($db == "pgsql") {
		$error = "We're sorry, but we don't have Postgres support in "
			. "this module.  ";
		drupal_set_message($error, "error");

	}

} // End of reg_install()


/**
* This function is called when the module is uninstalled after being disabled.
*/
function reg_uninstall() {
} // End of reg_uninstall()


/**
* This will remove all registration data from the system, and should only
* be used for testing.  For the love of Dog, do NOT use this in 
* production, EVER.
*/
function reg_wipe() {

	$query = "DROP TABLE IF EXISTS {reg}";
	db_query($query);

	$query = "DROP TABLE IF EXISTS {reg_type}";
	db_query($query);

	$query = "DROP TABLE IF EXISTS {reg_status}";
	db_query($query);

	$query = "DROP TABLE IF EXISTS {reg_level}";
	db_query($query);

	$query = "DROP TABLE IF EXISTS {reg_trans}";
	db_query($query);

	$query = "DROP TABLE IF EXISTS {reg_trans_gateway}";
	db_query($query);

	$query = "DROP TABLE IF EXISTS {reg_trans_type}";
	db_query($query);

	$query = "DROP TABLE IF EXISTS {reg_payment_type}";
	db_query($query);

	$query = "DROP TABLE IF EXISTS {reg_cc_type}";
	db_query($query);

	$query = "DROP TABLE IF EXISTS {reg_log}";
	db_query($query);

	$query = "DROP TABLE IF EXISTS {reg_badge_num}";
	db_query($query);

	$query = "DROP TABLE IF EXISTS {reg_shirt_size}";
	db_query($query);

	$query = "DROP TABLE IF EXISTS {reg_message}";
	db_query($query);

} // End of reg_wipe()

