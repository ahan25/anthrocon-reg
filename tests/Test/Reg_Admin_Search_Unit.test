<?php
/**
* This unit test tests out the main reg class.
*/
class Reg_Test_Admin_Search extends DrupalTestCase {

	/**
	* Implementation of getInfo() for information
	*/
	function getInfo() {
		return array(
			"name" => t("reg_admin_search Unit Test"),
			//"desc" => t("Test out the reg class"),
			"group" => t("reg-unit-tests"),
			);
	}


	function testSearchBadgeNumber() {

		//
		// Insert 3 new members
		//
		$output = $this->reg->get_badge_num();
		$this->assertNotNull($output);
		$badge_num = $output;
		$output = $this->reg->get_badge_num();
		$this->assertNotNull($output);
		$badge_num2 = $output;
		$output = $this->reg->get_badge_num();
		$this->assertNotNull($output);
		$badge_num3 = $output;
		$year = $this->reg->get_constant("year");
		$this->assertNotNull($year);

		$query = "INSERT INTO {reg} "
			. "(year, badge_num, badge_name) "
			. "VALUES "
			. "('%s', '%s', '%s') ";
		$query_args = array($year, $badge_num, $this->badge_name);
		$cursor = db_query($query, $query_args);
		$this->assertNotNull($cursor);
		$query_args = array($year, $badge_num2, $this->badge_name);
		$cursor = db_query($query, $query_args);
		$this->assertNotNull($cursor);
		$query_args = array($year, $badge_num3, $this->badge_name);
		$cursor = db_query($query, $query_args);
		$this->assertNotNull($cursor);

		//
		// Now try some searches
		//
		$search = array();
		$search["year"] = $year;
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$this->assertNotNull($cursor);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num3, $output["badge_num"]);

		$search["badge_num"] = $badge_num3;
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$output = db_fetch_array($cursor);
		$this->assertNotNull($cursor);
		$this->assertEqual($badge_num3, $output["badge_num"]);

		$search["badge_num"] = $badge_num2;
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$output = db_fetch_array($cursor);
		$this->assertNotNull($cursor);
		$this->assertEqual($badge_num2, $output["badge_num"]);

		$search["badge_num"] = $badge_num . "-" .$badge_num2;
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$output = db_fetch_array($cursor);
		$this->assertNotNull($cursor);
		$this->assertEqual($badge_num2, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertFalse($output);

		$search["badge_num"] = $badge_num2 . "-" . $badge_num3;
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$this->assertNotNull($cursor);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num3, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num2, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertFalse($output);

		$search["badge_num"] = $badge_num . "-" . $badge_num3;
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$this->assertNotNull($cursor);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num3, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num2, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertFalse($output);

		$search["badge_num"] = $badge_num . "-" . $badge_num;
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$this->assertNotNull($cursor);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertFalse($output);

		$search["badge_num"] = $badge_num . "-";
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$this->assertNotNull($cursor);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num3, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num2, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertFalse($output);

		$search["badge_num"] = "-" . $badge_num3;
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$this->assertNotNull($cursor);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num3, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num2, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertTrue($output);

		$search["badge_num"] = $badge_num3 . "-";
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$this->assertNotNull($cursor);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num3, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertFalse($output);

		$search["badge_num"] = "-" . $badge_num;
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$this->assertNotNull($cursor);
		$output = db_fetch_array($cursor);
		//
		// We can't assume there won't be additional badges here...
		//

		$search["badge_num"] = "-";
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$this->assertNotNull($cursor);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num3, $output["badge_num"]);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num2, $output["badge_num"]);
		//
		// We can't assume there won't be additional badges here...
		//

		//
		// Test an out of order range
		//
		$search["badge_num"] = $badge_num3 . "-" . $badge_num;
		$order_by = "ORDER BY reg.id DESC";
		$cursor = $this->search->get_cursor($search, $order_by);
		$this->assertNotNull($cursor);
		$output = db_fetch_array($cursor);
		$this->assertFalse($output);

	} // End of testSearchBadgeNumber()


	function setUp() {

		$this->factory = new reg_factory();
		$this->reg = $this->factory->get_object("reg");
		$this->search = $this->factory->get_object("admin_search");

		$this->badge_name = "Reg_Admin_Search test " . time();

	}


	function tearDown() {

		//
		// Clean up after ourselves
		//
		$query = "DELETE FROM {reg} WHERE badge_name LIKE '%s%'";
		$query_args = array($this->badge_name);
		db_query($query, $query_args);

	}


} // End of RegUnitTest class


