<?php
/**
*/
class Reg_Test_Util_Duplicate extends DrupalTestCase {

	/**
	* Implementation of getInfo() for information
	*/
	function getInfo() {
		return array(
			"name" => t("Reg_Util_Duplicate Unit Test"),
			//"desc" => t("Test out the reg class"),
			"group" => t("reg-unit-tests"),
			);
	}


	function test() {

		//
		// Grab our first registration year
		//
		$years = $this->reg->getYears();
		$year = array_shift($years);

		//$years = array(); // Debugging
		if (empty($years)) {
			$message = "No membership levels defined.  Skipping these tests.";
			$this->pass($message);
			return(null);
		}

		$query = "INSERT INTO {reg} (last) VALUES ('%s') ";
		$value = "testDuplicate " . time();
		db_query($query, $value);
		db_query($query, $value);

		$output = $this->util->getLastNames($year);
		$this->assertNotNull($output);
		$this->assertNotNull($output[0]);
		$this->assertNotNull($output[1]);
		$this->assertEqual($output[0]["field"], $output[1]["field"]);

		$query = "DELETE FROM {reg} WHERE last='%s' ";
		db_query($query, $value);


		$query = "INSERT INTO {reg} (phone) VALUES ('%s') ";
		$value = "testDuplicate " . time();
		db_query($query, $value);
		db_query($query, $value);

		$output = $this->util->getPhoneNumbers($year);
		$this->assertNotNull($output);
		$this->assertNotNull($output[0]);
		$this->assertNotNull($output[1]);
		$this->assertEqual($output[0]["field"], $output[1]["field"]);

		$query = "DELETE FROM {reg} WHERE phone='%s'";
		db_query($query, $value);


		$query = "INSERT INTO {reg} (email) VALUES ('%s') ";
		$value = "testDuplicate " . time();
		db_query($query, $value);
		db_query($query, $value);

		$output = $this->util->getEmailAddresses($year);
		$this->assertNotNull($output);
		$this->assertNotNull($output[0]);
		$this->assertNotNull($output[1]);
		$this->assertEqual($output[0]["field"], $output[1]["field"]);
	
		$query = "DELETE FROM {reg} WHERE email = '%s'";
		db_query($query, $value);


		$query = "INSERT INTO {reg} (address1) VALUE ('%s') ";
		$value = "testDuplicate " . time();
		db_query($query, $value);
		db_query($query, $value);

		$output = $this->util->getAddresses($year);
		$this->assertNotNull($output);
		$this->assertNotNull($output[0]);
		$this->assertNotNull($output[1]);
		$this->assertEqual($output[0]["field"], $output[1]["field"]);

		$query = "DELETE FROM {reg} WHERE address1 = '%s' ";
		db_query($query, $value);


		$query = "INSERT INTO {reg} (badge_name, reg_type_id, reg_status_id) "
			. "VALUES ('%s', 1, 1) ";
		$value = "testDuplicate " . time();
		db_query($query, $value);
		db_query($query, $value);

		$output = $this->util->getBadgeNames($year);
		$this->assertNotNull($output);
		$this->assertNotNull($output[0]);
		$this->assertNotNull($output[1]);
		$this->assertEqual($output[0]["field"], $output[1]["field"]);

		$query = "DELETE FROM {reg} WHERE badge_name = '%s'";
		db_query($query, $value);

	}


	function setUp() {

		$factory = new reg_factory();
		$this->reg = $factory->get_object("reg");
		$this->util = $factory->get_object("Util_Duplicate");

		//
		// Turn off display of errors while testing
		//
		//$this->reg->setErrorDisplay(false);

	}


	function tearDown() {
	}


} // End of Reg_Util_Duplicate_UnitTest class


