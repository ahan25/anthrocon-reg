<?php
/**
* This unit test tests out the main reg class.
*/
class Reg_Member_UnitTest extends DrupalTestCase {

	/**
	* Implementation of get_info() for information
	*/
	function get_info() {
		return array(
			"name" => t("reg_member class"),
			"desc" => t("Test out the reg_member class"),
			"group" => t("Registration System"),
			);
	}


	function testAddMember() {

		//
		// Test adding a member with some random data.
		//
		$data = array();
		$data["badge_name"] = "Fluffy Samplefur";
		$data["first"] = "Test first name";
		$data["last"] = "Test last name";
		$data["address1"] = "Test address1";
		$data["address2"] = "Test address2";
		$data["city"] = "Test city";
		$data["state"] = "Test state";
		$data["zip"] = "Test Zip/Postal code";
		$data["country"] = "Test Country";
		$data["email"] = "Test Email";
		$data["phone"] = "Test Phone";

		$output = $this->reg_member->add_member($data);
		$this->assertNotNull($output);
		$this->assertNotNull($data["badge_num"]);
		
		//
		// Make sure our badge number is incremented on the next member 
		// that is added.
		//
		$expected = $output + 1;
		unset($data["badge_num"]);
		$output = $this->reg_member->add_member($data);
		$this->assertNotNull($output);
		$this->assertEqual($expected, $output);
		
		//
		// Check all of our fields
		//
		$badge_num = $output;
		$query = "SELECT * FROM reg WHERE badge_num = '%s'";
		$query_args = array($badge_num);
		$cursor = db_query($query, $query_args);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num, $output["badge_num"]);
		$this->assertEqual($data["badge_name"], $output["badge_name"]);
		$this->assertEqual($data["first"], $output["first"]);
		$this->assertEqual($data["last"], $output["last"]);
		$this->assertEqual($data["address1"], $output["address1"]);
		$this->assertEqual($data["address2"], $output["address2"]);
		$this->assertEqual($data["city"], $output["city"]);
		$this->assertEqual($data["state"], $output["state"]);
		$this->assertEqual($data["zip"], $output["zip"]);
		$this->assertEqual($data["country"], $output["country"]);
		$this->assertEqual($data["email"], $output["email"]);
		$this->assertEqual($data["phone"], $output["phone"]);

	} // End of testAddMember()


	/**
	* Add a member with a specific set badge number.
	*/
	function testAddMemberSetBadgeNumber() {

		//
		// Fetch the next available badge number, then use it in a 
		// new membership.
		//
		$output = $this->reg->get_badge_num();
		$this->assertNotNull($output);
		$badge_num = $output;

		$data = array();
		$data["badge_name"] = "Fluffy Samplefur";
		$data["badge_num"] = $badge_num;
		$output = $this->reg_member->add_member($data);
		$this->assertNotNull($output);
		$this->assertEqual($badge_num, $output);
		
		$query = "SELECT * FROM reg WHERE badge_num = '%s'";
		$query_args = array($badge_num);
		$cursor = db_query($query, $query_args);
		$output = db_fetch_array($cursor);
		$this->assertEqual($badge_num, $output["badge_num"]);
		$this->assertNotNull($output["badge_name"]);
		$this->assertEqual($data["badge_name"], $output["badge_name"]);

	} // End of testAddMemberSetBadgeNumber()


	function testIsBadgeNumAvailable() {

		$data = array();
		$data["badge_name"] = "Fluffy Samplefur";
		$output = $this->reg_member->add_member($data);
		$this->assertNotNull($output);
		$badge_num = $output;

		$output = $this->reg->is_badge_num_available($data["id"], 
			$badge_num);
		$this->assertTrue($output);

		//
		// Try using this badge number on another badge.
		//
		$output = $this->reg->is_badge_num_available(($data["id"] + 1), 
			$badge_num);
		$this->assertFalse($output);
		//$output = drupal_get_messages();
		//$this->assertNotNull($output["error"][0]);
		//$regexp = t("Badge number.*is already in use");
		//$this->assertTrue(ereg($regexp, $output["error"][0]), 
		//	"Error message expected");

		//
		// Now try a badge number that is WAY too high.
		//
		$output = $this->reg->is_badge_num_available($data["id"], 
			($badge_num + 100));
		$this->assertTrue($output);
		//$output = drupal_get_messages();
		//$this->assertNotNull($output["error"][0]);
		//$regexp = t("Badge number.*exceeds highest assigned number");
		//$this->assertTrue(ereg($regexp, $output["error"][0]), 
		//	"Error message found");
		
	} // End of testIsBadgeNumAvailable()


	function setUp() {
		$this->factory = new reg_factory();
		$this->reg = $this->factory->get_object("reg");
		$this->reg_member = $this->factory->get_object("member");
	}

	function tearDown() {
	}



} // End of Reg_Member_UnitTest class


